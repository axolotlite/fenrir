/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// AppSpecApplyConfiguration represents a declarative configuration of the AppSpec type for use
// with apply.
type AppSpecApplyConfiguration struct {
	Title          *string                         `json:"title,omitempty"`
	ID             *int                            `json:"id,omitempty"`
	IsHDRSupported *bool                           `json:"isHDRSupported,omitempty"`
	AppAssetWebP   []byte                          `json:"appAssetWebP,omitempty"`
	Template       *v1.PodTemplateSpec             `json:"template,omitempty"`
	WolfConfig     *WolfConfigApplyConfiguration   `json:"wolfConfig,omitempty"`
	VolumeConfig   *VolumeConfigApplyConfiguration `json:"volumeConfig,omitempty"`
}

// AppSpecApplyConfiguration constructs a declarative configuration of the AppSpec type for use with
// apply.
func AppSpec() *AppSpecApplyConfiguration {
	return &AppSpecApplyConfiguration{}
}

// WithTitle sets the Title field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Title field is set to the value of the last call.
func (b *AppSpecApplyConfiguration) WithTitle(value string) *AppSpecApplyConfiguration {
	b.Title = &value
	return b
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *AppSpecApplyConfiguration) WithID(value int) *AppSpecApplyConfiguration {
	b.ID = &value
	return b
}

// WithIsHDRSupported sets the IsHDRSupported field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IsHDRSupported field is set to the value of the last call.
func (b *AppSpecApplyConfiguration) WithIsHDRSupported(value bool) *AppSpecApplyConfiguration {
	b.IsHDRSupported = &value
	return b
}

// WithAppAssetWebP adds the given value to the AppAssetWebP field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AppAssetWebP field.
func (b *AppSpecApplyConfiguration) WithAppAssetWebP(values ...byte) *AppSpecApplyConfiguration {
	for i := range values {
		b.AppAssetWebP = append(b.AppAssetWebP, values[i])
	}
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *AppSpecApplyConfiguration) WithTemplate(value v1.PodTemplateSpec) *AppSpecApplyConfiguration {
	b.Template = &value
	return b
}

// WithWolfConfig sets the WolfConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WolfConfig field is set to the value of the last call.
func (b *AppSpecApplyConfiguration) WithWolfConfig(value *WolfConfigApplyConfiguration) *AppSpecApplyConfiguration {
	b.WolfConfig = value
	return b
}

// WithVolumeConfig sets the VolumeConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeConfig field is set to the value of the last call.
func (b *AppSpecApplyConfiguration) WithVolumeConfig(value *VolumeConfigApplyConfiguration) *AppSpecApplyConfiguration {
	b.VolumeConfig = value
	return b
}
