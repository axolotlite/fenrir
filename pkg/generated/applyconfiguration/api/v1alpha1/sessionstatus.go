/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// SessionStatusApplyConfiguration represents a declarative configuration of the SessionStatus type for use
// with apply.
type SessionStatusApplyConfiguration struct {
	Conditions     []v1.ConditionApplyConfiguration `json:"conditions,omitempty"`
	Ports          *SessionPortsApplyConfiguration  `json:"ports,omitempty"`
	WolfSessionID  *string                          `json:"wolfSessionID,omitempty"`
	StreamURL      *string                          `json:"streamURL,omitempty"`
	DeploymentName *string                          `json:"deploymentName,omitempty"`
	ServiceName    *string                          `json:"serviceName,omitempty"`
}

// SessionStatusApplyConfiguration constructs a declarative configuration of the SessionStatus type for use with
// apply.
func SessionStatus() *SessionStatusApplyConfiguration {
	return &SessionStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *SessionStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *SessionStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithPorts sets the Ports field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ports field is set to the value of the last call.
func (b *SessionStatusApplyConfiguration) WithPorts(value *SessionPortsApplyConfiguration) *SessionStatusApplyConfiguration {
	b.Ports = value
	return b
}

// WithWolfSessionID sets the WolfSessionID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WolfSessionID field is set to the value of the last call.
func (b *SessionStatusApplyConfiguration) WithWolfSessionID(value string) *SessionStatusApplyConfiguration {
	b.WolfSessionID = &value
	return b
}

// WithStreamURL sets the StreamURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StreamURL field is set to the value of the last call.
func (b *SessionStatusApplyConfiguration) WithStreamURL(value string) *SessionStatusApplyConfiguration {
	b.StreamURL = &value
	return b
}

// WithDeploymentName sets the DeploymentName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeploymentName field is set to the value of the last call.
func (b *SessionStatusApplyConfiguration) WithDeploymentName(value string) *SessionStatusApplyConfiguration {
	b.DeploymentName = &value
	return b
}

// WithServiceName sets the ServiceName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceName field is set to the value of the last call.
func (b *SessionStatusApplyConfiguration) WithServiceName(value string) *SessionStatusApplyConfiguration {
	b.ServiceName = &value
	return b
}
